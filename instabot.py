import json
import time
import traceback
import logging
from typing import Any, Dict, List, Optional
from instagrapi import Client
from instagrapi.exceptions import ClientError, LoginRequired
from requests.exceptions import RetryError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def load_settings() -> Optional[Dict[str, Any]]:
    try:
        with open("settings.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    return None

cl = Client()
cl.delay_range = [3, 6]  # –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç 3 –¥–æ 6 —Å–µ–∫—É–Ω–¥

def load_cookies() -> bool:
    try:
        cl.load_settings('cookies.json')
        logger.info("–ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
        return True
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª cookies.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏: {e}")
    return False

def save_cookies() -> None:
    try:
        cl.dump_settings('cookies.json')
        logger.info("–ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É–∫–æ–≤: {e}")

def login_with_credentials() -> None:
    settings = load_settings()
    if not settings:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        raise ValueError("Settings not loaded")

    try:
        logger.info("–ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º")
        cl.login(settings["instagram_username"], settings["instagram_password"])
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {settings['instagram_username']}")
        save_cookies()
    except ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º: {e}")
        raise
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        raise

def initialize_login() -> None:
    global cl
    if load_cookies():
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—É–∫–æ–≤")
            cl.get_timeline_feed()
            logger.info("–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—É–∫–æ–≤")
        except (ClientError, LoginRequired) as e:
            logger.warning(f"–°–µ—Å—Å–∏—è —Å –∫—É–∫–∞–º–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {e}")
            login_with_credentials()
    else:
        login_with_credentials()

def get_all_comments(media_id: str) -> List[Any]:
    comments_data = []
    output_file = f"comments_{media_id}.json"

    logger.info(f"üöÄ –ó–ê–ì–†–£–ó–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –î–õ–Ø –ü–û–°–¢–ê {media_id}")

    try:
        media_info = cl.media_info(media_id).model_dump()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ model_dump()
        comment_count = media_info.get('comment_count', 0)
        logger.info(f"‚Ñπ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comment_count}")

        if comment_count == 0:
            logger.info("‚Ñπ –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return []

        csrf_token = cl.private.cookies.get("csrftoken")
        headers = {
            "X-CSRFToken": csrf_token,
            "X-IG-App-ID": "1217981644879628",
            "Referer": f"https://www.instagram.com/p/{media_info['code']}/"
        }

        loaded_count = 0
        next_max_id: Optional[str] = None
        retry_count = 0
        max_retries = 3

        while loaded_count < min(comment_count, 2000) and retry_count < max_retries:
            try:
                params = {
                    "can_support_threading": "true",
                    "permalink_enabled": "false",
                    "count": 20  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏
                }

                if next_max_id:
                    params["max_id"] = next_max_id

                response = cl.private_request(
                    f"media/{media_id}/comments/",
                    params=params,
                    headers=headers
                )

                comments = response.get("comments", [])
                if not comments:
                    logger.info("‚Ñπ –ë–æ–ª—å—à–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    break

                valid_comments = [c for c in comments if isinstance(c, dict)]
                comments_data.extend(valid_comments)
                loaded_count += len(valid_comments)

                if valid_comments:
                    next_max_id = valid_comments[-1].get("pk")
                else:
                    next_max_id = None

                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(valid_comments)} | –í—Å–µ–≥–æ: {loaded_count}/{comment_count}")

                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(comments_data, f, ensure_ascii=False, indent=2)

                current_delay = min(10, 5 + loaded_count // 100)
                logger.info(f"‚è≥ –ü–∞—É–∑–∞ {current_delay} —Å–µ–∫...")
                time.sleep(current_delay)

                retry_count = 0

            except RetryError as e:
                retry_count += 1
                error_msg = str(e)[:200]
                logger.warning(f"‚ö† –û—à–∏–±–∫–∞ ({retry_count}/{max_retries}): {error_msg}")

                if retry_count >= max_retries:
                    logger.error("‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
                    break

                error_delay = min(30, 10 * retry_count)
                logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {error_delay} —Å–µ–∫...")
                time.sleep(error_delay)
                continue
            except ClientError as e:
                logger.error(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                break

    except ClientError as e:
        logger.error(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

    try:
        with open(output_file, 'w', encoding="utf-8") as f:
            json.dump(comments_data, f, ensure_ascii=False, indent=2)
        logger.info(f"üíæ –°–û–•–†–ê–ù–ï–ù–û: {len(comments_data)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        logger.info(f"üìÇ –§–∞–π–ª: {output_file}")
    except Exception as e:
        logger.error(f"‚õî –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    logger.info(f"üèÅ –ó–ê–í–ï–†–®–ï–ù–û: {len(comments_data)}/{comment_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")

    return [c["pk"] for c in comments_data if isinstance(c, dict) and "pk" in c]

def main_loop() -> None:
    initialize_login()

    while True:
        settings = load_settings()
        if not settings:
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –û–∂–∏–¥–∞–Ω–∏–µ...")
            time.sleep(10)
            continue

        logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å—Ç–æ–≤...")
        for post_url in settings["posts"]:
            media_id = cl.media_pk_from_url(post_url)
            get_all_comments(media_id)
            time.sleep(10)

        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {settings.get('check_interval', 60)} —Å–µ–∫...")
        time.sleep(settings.get("check_interval", 60))

if __name__ == "__main__":
    try:
        main_loop()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
